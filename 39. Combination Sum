package firstRound;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;

import java.util.List;
import java.util.Set;

public class CombinationSum {

	public static void main(String[] args) {

		int[] cans = {2, 3, 6, 7};
		
		List<List<Integer>> res = combinationSum(cans, 7);
		
		System.out.println(res);
	}

	public static List<List<Integer>> combinationSum(int[] candidates, int target) {
		List<List<Integer>> result = new ArrayList<List<Integer>>();

		Set<List<Integer>> set = new HashSet<List<Integer>>();

		Arrays.sort(candidates);

		result = dp(candidates, target, 0, new ArrayList<Integer>());
		
//		set.addAll(result);
//		result.clear();
//
//		result.addAll(set);
		return result;
	}

	public static List<List<Integer>> dp(int[] can, int target, int index, ArrayList<Integer> pre) {
		List<List<Integer>> dplist = new ArrayList<List<Integer>>();

		// index represent the start point of element of candidate array for consideration.
		System.out.println("current index = " + index);
		
		if (index < can.length && can[index] <= target) {

				// not chosen
				List<List<Integer>> list1 = dp(can, target, index + 1, pre);
				dplist.addAll(list1);
				// yes used
				
				pre.add(can[index]);
				List<List<Integer>> list2 = dp(can, target - can[0], index, pre);
				dplist.addAll(list2);
			

		}
		return dplist;
	}

}
