// best solution
public class ValidBST {
	
	public boolean isValid(TreeNode root){
		return helper(root, Long.MIN_VALUE, Long.MAX_VALUE);
	}
	
	public static boolean helper(TreeNode root, Long min, Long max){
		if(root == null)
			return true;
		if(root.val >= max || root.val <= min)
			return false;
		
		return helper(root.left, min, (long)root.val) && helper(root.right, (long)root.val, max);
	}

}

// my solution
class Solution {
    public boolean isValidBST(TreeNode root) {
        boolean res = false;
        
        if(root == null) return true;
        
        if(root.left == null && root.right == null) return true;
        
        boolean b3 = true, b4 = true;
        
        if(root.left != null) {
            
            if(root.val <= root.left.val) return false;
            
            TreeNode preceed = new TreeNode(0);
            if(root.left.right != null) {
              preceed = root.left.right;
              while(preceed.right != null) preceed = preceed.right;   
              b3 = root.val > preceed.val;  
            }
                 
        }
        
        
        if(root.right != null) {
            
            if(root.right.val <= root.val) return false;
            
            TreeNode post = new TreeNode(0);
            if(root.right.left != null){
                post = root.right.left;
                while(post.left != null) post = post.left;
                b4 = post.val > root.val; 
            }
                
        }        
        
        return  b3 && b4 && isValidBST(root.left) && isValidBST(root.right);       
        
    }
}
