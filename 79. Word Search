class Solution {
    public boolean exist(char[][] board, String word) {
        if(board == null || board.length == 0 || board[0].length == 0) return false;
        
        int m = board.length;
        int n = board[0].length;
        
        if(word.length() > m * n) return false;
        
        for(int i = 0; i < m; i++){
            for(int j = 0; j < n; j++){
                
                if( dfs(board, i, j, word, 0) ) return true;
                
            }    
        }
        
        return false;
    }
    
    public boolean dfs(char[][] board, int i, int j, String word, int k){
        
        if(i < 0 || j < 0 || i == board.length || j == board[0].length) return false;
        if(board[i][j] != word.charAt(k)) return false;
        boolean res = false;
        
        if(board[i][j] == word.charAt(k)){
            if(k == word.length() - 1) return true;
            
            board[i][j] ^= 256;
            
            
                        
            res =  dfs(board, i-1, j, word, k + 1)
                ||  dfs(board, i+1, j, word, k + 1)
                || dfs(board, i, j - 1, word, k + 1)
                ||  dfs(board, i, j + 1, word, k + 1);
            
            
            board[i][j] ^= 256;
        }
        return res;
        
    }
}
