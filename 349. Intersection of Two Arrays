// 1ms hash method
class Solution {
    public int[] intersection(int[] nums1, int[] nums2) {
        
        if(nums1 == null || nums1.length == 0 || nums2 == null || nums2.length == 0) return new int[0];
        
        if(nums1.length > nums2.length) return intersection(nums2, nums1);
        
        int n1 = nums1.length;
        int n2 = nums2.length;
        
        int max = nums1[0];
        int min = nums1[0];
        for(int a1 : nums1){
            if(a1 > max) max = a1;
            if(a1 < min) min = a1;
        }
        
        boolean[] hash = new boolean[max - min + 1];
       
        for(int a1 : nums1){
            hash[a1 - min] = true;
        }
        int k = 0;
        int[] res = new int[Math.min(max - min + 1, n2)];
        
        for(int a2 : nums2){
            if(a2 > max || a2 < min) continue;
            
            if(hash[a2 - min]){
                res[k++] = a2;
                hash[a2 - min] = false;
            }
        }
        
        return Arrays.copyOf(res, k);
    }
}

// my 5ms sort method
class Solution {
    public int[] intersection(int[] nums1, int[] nums2) {
        
        if(nums1 == null || nums1.length == 0 || nums2 == null || nums2.length == 0) return new int[0];
        
        if(nums1.length > nums2.length) return intersection(nums2, nums1);
        
        HashSet<Integer> set = new HashSet<>();
        
        Arrays.sort(nums1);
        
        for(int i = 0; i < nums2.length; i++){
            int temp = Arrays.binarySearch(nums1, nums2[i]);
            if(temp >= 0) set.add(nums1[temp]);
        }
              
        int[] res = new int[set.size()];
        Iterator it = set.iterator();
        int k = 0;
        while(it.hasNext()){
            res[k++] = (int) it.next();
        }
        
        return res;
    }
}
