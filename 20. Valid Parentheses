class Solution {
    public boolean isValid(String s) {
/*
// first version use array to save the parences.
        int[] parences = new int[128];
        parences['('] = 1;
        parences[')'] = 2;
        parences['['] = 3;
        parences[']'] = 4;
        parences['{'] = 5;
        parences['}'] = 6;
        
        Stack<Character> stack = new Stack<Character>();
        
        for(int i = 0; i < s.length(); i++){
            char c = s.charAt(i);
            if(stack.isEmpty()){
                stack.push(c);
            }
            else{
                char temp = stack.peek();
                if(parences[c] - parences[temp] == 1) stack.pop();
                else stack.push(c);
            }
            
        }
*/  

// my second version directly use the number of the ascII to calculate. It runs faster!
         Stack<Character> stack = new Stack<Character>();
        
        for(int i = 0; i < s.length(); i++){
            char c = s.charAt(i);
            if(stack.isEmpty()){
                stack.push(c);
            }
            else{
                int temp = c - stack.peek();
                if(temp == 1 || temp == 2) stack.pop();
                else stack.push(c);
            }
            
        }
        
        return stack.isEmpty();
    }
}
