// array sort
class Solution {
    public int hIndex(int[] citations) {
 
        int N = citations.length;
        if(citations == null || N == 0) return 0;
        
        if(N == 1) {
            if (citations[0] == 0) return 0;
            else return 1;
        }
        
        Arrays.sort(citations);
        
        int i = 1;
        while(i <= N && citations[N-i] >= i) i++;
    
        return i - 1;      

    }   
    
}

// priority queue

class Solution {
    public int hIndex(int[] citations) {
 
        int N = citations.length;
        if(citations == null || N == 0) return 0;

        PriorityQueue<Integer> queue = new PriorityQueue<>(N, Collections.reverseOrder());
        for(int i = 0; i < N; i++){
            queue.offer(citations[i]);
        }
 
        int i = 1;
        while(i <= N && queue.poll() >= i) i++;
    
        return i - 1;      

    }    
}

// 2ms
// By omit the self define comparator, the speed is improved 10 times!!!!!!!!!!!!!!
public int hIndex(int[] citations) {
       if(citations == null || citations.length == 0) return 0;
               
        PriorityQueue<Integer> pq = new PriorityQueue<Integer>();
        for(int i : citations){
            pq.offer(-i);
        }
        
        int n = 1;
        while(!pq.isEmpty()){
            
            int citation = pq.poll();
            
            if(-citation >= n) {n++;}
            else break;
        }
        return n-1;
    }

// 33ms
    public int hIndex(int[] citations) {
       if(citations == null || citations.length == 0) return 0;
        if(citations.length  == 1) {
            if(citations[0] == 0) return 0;   
            else return 1;
            
        }
        
        PriorityQueue<Integer> pq = new PriorityQueue<Integer>((a, b)->(b - a));
        for(int i : citations){
            pq.offer(i);
        }
        
        
        
        int n = 1;
        while(!pq.isEmpty()){
            
            int citation = pq.poll();
            
            if(citation >= n) {n++;}
            else break;
        }
        return n-1;
    }


//Time: O(n), Space: O(n)
class Solution {
    public int hIndex(int[] citations) {
        if (citations == null || citations.length < 1) {
            return 0;
        }
        //h-index wouldn't exceed the total number of articles
        //for example, even it is cited[100, 98, 0, 1, 5], we will only care about the number of cites including or below 5
        int n = citations.length; //n: number of articles
        int[] count = new int[n + 1];
        for (int i : citations) {
            if (i < citations.length) {
                count[i]++;
            } else {
                count[n]++;   
            }
        }
        int sum = 0;
        int max = 0;
        for (int i = n; i >= 0; i--) {
            sum += count[i];
            if (sum >= i) {
                max = i; 
                break;
            }
        }
        return max;
    }
}
