class Solution {
    public int maxProfit(int[] prices) {
        int len = prices.length,  int max = 0;
        
        for(int i = 0; i < len - 1; i++){
            
            // reduce the useless calculation before find one possible candidate.
            if(prices[i] >= prices[i + 1]) continue;
            
            for(int j = len - 1; j > i; j--){
                              
              if( prices[j] - prices[i] > max) max =  prices[j] - prices[i]  ;
                
            }
            
            // big decrease of useless calculation after one possible candidate.
            while( i+1 < len -1 && prices[i] < prices[i + 1]) {
                i++;
            }
        }
        
        return max;
    }
}

// perfect solution from other person

public static int maxProfit(int[] prices){
		
		if(prices.length == 0) return 0;
		
		int min = prices[0], maxProfit = 0;
	
		for(int i = 1; i < prices.length; i++){
			int currentProfit = prices[i] - min;
			if(prices[i] < min) min = prices[i];
			
			if(currentProfit > maxProfit) maxProfit = currentProfit;
		}
		
		return maxProfit;
	}
